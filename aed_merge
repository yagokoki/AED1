#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void intercala(int p, int q, int r, int v[]) {
  int i, j, k, *w;
  w = malloc((r - p) * sizeof(int));
  i = p;
  j = q;
  k = 0;
  while (i < q && j < r) {
    if (v[i] <= v[j])
      w[k++] = v[i++];
    else
      w[k++] = v[j++];
  }
  while (i < q)
    w[k++] = v[i++];
  while (j < r)
    w[k++] = v[j++];
  for (i = p; i < r; i++)
    v[i] = w[i - p];
  free(w);
}

void Mergesort(int p, int r, int v[]) {
  if (p < r - 1) {
    int q = (p + r) / 2;
    Mergesort(p, q, v);
    Mergesort(q, r, v);
    intercala(p, q, r, v);
  }
}

int main(void) {
  int n, i, j;
  clock_t tinicial, tfinal;
  double tempo;
  double tempomili;

  // cria um vetor onde serão guardados os valores
  int v[20000];

  // coloca valores aleatórios dentro do vetor
  for (i = 1; i <= 4; i++) {
    n = 5000 * i;
    for (j = 0; j < n; j++) {
      v[j] = rand();
    }

    // guarda o valor de tempo no momento em que a função de ordenação é
    // chamada, e guarda outro para quando a função acaba de ser executada;
    tinicial = clock();
    Mergesort(0, n, v);
    tfinal = clock();

    // compara o valor final com o inicial para encontrar a variação do tempo e
    // depois transforma de segundos para milissegundos
    tempo = ((double)(tfinal - tinicial)) / CLOCKS_PER_SEC;
    tempomili = tempo * 1000;

    printf("\nquantidade de valores ordenados: %d\n", n);
    printf("tempo de execucao: %f milissegundos ", tempomili);
  }
  return 0;
}
