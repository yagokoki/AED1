#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void InsereEmHeap(int m, int v[]) {
  int f = m + 1;
  while /*X*/ (f > 1 && v[f / 2] < v[f]) {
    int t = v[f / 2];
    v[f / 2] = v[f];
    v[f] = t;
    f = f / 2;
  }
}

void SacodeHeap(int m, int v[]) {
  int t, f = 2;
  while /*X*/ (f <= m) {
    if (f < m && v[f] < v[f + 1])
      ++f;
    if (v[f / 2] >= v[f])
      break;
    t = v[f / 2];
    v[f / 2] = v[f];
    v[f] = t;
    f *= 2;
  }
}

void Heapsort(int n, int v[]) {
  int m;
  for (m = 0; m < n; m++)
    InsereEmHeap(m, v);
  for (m = n; /*X*/ m > 1; m--) {
    int t = v[1];
    v[1] = v[m];
    v[m] = t;
    SacodeHeap(m - 1, v);
  }
}

int main(void) {
  int n, i, j;
  clock_t tinicial, tfinal;
  double tempo;
  double tempomili;

  // cria um vetor onde serão guardados os valores
  int v[20000];

  // coloca valores aleatórios dentro do vetor
  for (i = 1; i <= 4; i++) {
    n = 5000 * i;
    for (j = 0; j < n; j++) {
      v[j] = rand();
    }

    // guarda o valor de tempo no momento em que a função de ordenação é
    // chamada, e guarda outro para quando a função acaba de ser executada;
    tinicial = clock();
    Heapsort(n, v);
    tfinal = clock();

    // compara o valor final com o inicial para encontrar a variação do tempo e
    // depois transforma de segundos para milissegundos
    tempo = ((double)(tfinal - tinicial)) / CLOCKS_PER_SEC;
    tempomili = tempo * 1000;
    
    printf("tempo de execucao: %f milissegundos ", tempomili);
    printf("\nquantidade de valores ordenados: %d\n", n);
   
  }
  return 0;
}
